module.exports = [{"name":"ArrowBox","description":"","props":{"text":{"type":{"name":"string"},"required":false,"description":"the text to show on the button","defaultValue":{"value":"'Click me'","computed":false}},"theme":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{\n  button: {},\n}","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport './ArrowBox.css'\n// import ReactLogo from  './action-popup-frame.svg'\nclass Button extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div class=\"flexbox\">\n          <div class=\"arrow_box\">test</div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nButton.propTypes = {\n  /** the text to show on the button */\n  text: PropTypes.string,\n\n  theme: PropTypes.object,\n}\n\nButton.defaultProps = {\n  text: 'Click me',\n\n  theme: {\n    button: {},\n  },\n}\n\nexport default Button\n","examples":[{"name":"ArrowBox.examples","description":"","code":"import React from 'react'\nimport ArrowBox from '@1ak31sha/ui/ArrowBox'\nfunction ArrowBoxContainer() {\n\n  return (\n    <div>\n      <ArrowBox />\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <ArrowBoxContainer />\n}\n"}]},{"name":"Button","description":"","props":{"text":{"type":{"name":"string"},"required":false,"description":"the text to show on the button","defaultValue":{"value":"'Click me'","computed":false}},"theme":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{\n  button: {},\n}","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Button extends React.Component {\n  handleClick = reactSyntheticEvent => {\n    const { onClick } = this.props\n    if (onClick) {\n      onClick()\n    }\n  }\n\n  render() {\n    const lightTheme = {\n      button: {\n        backgroundColor: 'white',\n        color: 'palevioletred',\n      },\n    }\n    const createButtonStyleFromTheme = ({ button }) => ({\n      backgroundColor: button.backgroundColor || 'black',\n      borderColor: button.borderColor || 'palevioletred',\n      color: button.color || 'palevioletred',\n\n      fontSize: button.fontSize || '18pt',\n      fontFamily: button.fontFamily || 'verdana',\n\n      borderWidth: button.borderWidth || '2.1px',\n      borderStyle: button.borderStyle,\n      borderRadius: button.borderRadius || '1rem',\n\n      width: button.width,\n      padding: button.padding || '0.14em',\n      paddingLeft: '1em',\n      paddingRight: '1em',\n      margin: button.margin || '0.22em',\n    })\n    const { text, theme, light } = this.props // dark\n    console.log(createButtonStyleFromTheme(theme))\n    console.log(light)\n    return (\n      <input\n        style={\n          light\n            ? createButtonStyleFromTheme(lightTheme)\n            : createButtonStyleFromTheme(theme)\n        }\n        type=\"button\"\n        onClick={this.handleClick}\n        value={text}></input>\n    )\n  }\n}\n\nButton.propTypes = {\n  /** the text to show on the button */\n  text: PropTypes.string,\n\n  theme: PropTypes.object,\n}\n\nButton.defaultProps = {\n  text: 'Click me',\n\n  theme: {\n    button: {},\n  },\n}\n\nexport default Button\n","examples":[{"name":"Button.examples","description":"","code":"import React, { useState } from 'react'\nimport Button from '@1ak31sha/ui/Button'\n\nfunction ButtonContainer() {\n  const [theme, setTheme] = useState(false)\n\n  const toggleTheme = theme => {\n    setTheme(!theme)\n  }\n\n  return (\n    <div>\n      <Button\n        light={theme}\n        text=\"Toggle Default Themes\"\n        onClick={() => {\n          toggleTheme(theme)\n        }}\n      />\n      <br />\n      <Button\n        text=\"Custom Theme\"\n        theme={{\n          button: {\n            backgroundColor: 'yellow',\n            borderColor: 'black',\n            color: 'blue',\n            borderRadius: '0.07em'\n          },\n        }}\n      />\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <ButtonContainer />\n}\n"}]},{"name":"Debug","description":"SVG Eye Icon","code":"import React from 'react'\n\n\nfunction Func() {\n  // const [index, setIndex] = useState(0)\n  console.log('function component')\n  // const [theme, setTheme] = useState()\n  //const themes = {\n  //  light: {\n  //    button: {\n  //      backgroundColor: '#121212',\n  //      borderColor: 'palevioletred',\n  //      color: 'palevioletred',\n  //      fontSize: '21pt',\n  //    },\n  //  },\n  //  dark: {\n  //    button: {\n  //      backgroundColor: '#202020',\n  //      borderColor: '#131313',\n  //      color: 'palevioletred',\n  //      fontSize: '16pt',\n  //      fontFamily: 'Avenir Next',\n  //      borderRadius: '3px',\n  //      width: '8em',\n  //      padding: '0.5rem 0',\n  //      margin: '0.5rem 1rem',\n  //      borderWidth: '0.051em',\n  //    },\n  //  },\n  //}\n\n  // const toggleTheme = () => {\n    // // // // // // // // console.log('new drip', index % 3)\n    // setIndex(index => index + 1)\n    // setTheme()\n  //}\n\n  return (\n    <div className=\"\">\n      <br />\n      <br />\n    </div>\n  )\n}\n\n\n/** SVG Eye Icon */\nclass EyeIcon2 extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { date: new Date() }\n    console.log('constructor, props', props, `testing`)\n  }\n  static getDerivedStateFromProps(props, state){\n    console.log('getderivedStateFromProps',props,state)\n  }\n    static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n  render() {\n    console.log('render')\n    return <h1>Hello,<Func/> </h1>\n  }\n}\n// Attribution: Fabi√°n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n// Mounting\n// These methods are called in the following order when an instance of a component is being created and inserted into the DOM:\n\nexport default EyeIcon2\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\nimport Debug from '@1ak31sha/ui/Debug';\n\nexport default function EyeIconExample() {\n  return <Debug />;\n}\n"}]},{"name":"Dropdown","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","examples":[]},{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabi√°n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\nimport EyeIcon from '@1ak31sha/ui/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n"}]},{"name":"HelloWorld","description":"","code":"import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledInput = styled.input`\n  background-color: #464646;\n  color: #a6e22d;\n  border: 0;\n  height: 38px;\n  margin: 0.3em;\n  border-radius: 0.2em;\n`\nclass HelloWorld extends React.Component {\n  render() {\n    console.log('rendering')\n    const {\n      value,\n      render,\n      placeholder,\n      onChange,\n    } = this.props\n    console.log(onChange)\n\n    return (\n      <React.Fragment>\n        {render && (\n          <StyledInput\n            value={value}\n            placeholder={placeholder}\n            type=\"text\"\n            onChange={this.typing}\n            size={16}\n          />\n        )}\n      </React.Fragment>\n    )\n  }\n  typing = evt => {\n    const { type, onChange } = this.props\n    console.log(evt.target.value)\n    return onChange(evt.target.value, type)\n  }\n}\n\nexport default HelloWorld\n","examples":[{"name":"ExampleHelloWorld","description":"Custom message","code":"import React from 'react';\nimport HelloWorld from '@1ak31sha/ui/HelloWorld';\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return (\n    <HelloWorld message=\"Pluralsight viewers!\" />\n  )\n}\n"}]},{"name":"Input","description":"","props":{"doesRender":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\n\nconst StyledInput = styled.input`\n  background-color: #464646;\n  color: #a6e22d;\n  border: 0;\n  height: 38px;\n  margin: 0.3em;\n  border-radius: 0.2em;\n`\nclass Input extends React.Component {\n  render() {\n    console.log('rendering')\n    const {\n      value,\n      doesRender,\n      placeholder,\n      onChange,\n      debug,\n    } = this.props\n    if (debug) {\n      console.log(onChange)\n    }\n    console.log(this.props)\n    return (\n      <React.Fragment>\n        {/*\n        <>asdf</>\n            */}\n      {doesRender && (\n          <StyledInput\n            value={value}\n            placeholder={placeholder}\n            type=\"text\"\n            onChange={this.typing}\n            size={16}\n          />\n        )}\n      </React.Fragment>\n    )\n  }\n  typing = evt => {\n    const { type, onChange, debug } = this.props\n    if (debug) {\n      console.log(evt.target.value)\n    }\n    return onChange(evt.target.value, type)\n  }\n}\n\n\nInput.propTypes = {\n  doesRender: PropTypes.bool\n}\n// Input.defaultProps = {\n  // doesRender: true,\n// \n// }\n Input.defaultProps = {\n doesRender: true,\n }\n\nexport default Input\n","examples":[{"name":"Input.example","description":"","code":"import React from 'react';\nimport Input from '@1ak31sha/ui/Input';\n\nexport default function InputExample() {\n  return <Input \n    placeholder='Enter Text'\n    doesRender={true}\n    />;\n}\n"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","examples":[{"name":"ExampleOptional","description":"Optional label","code":"import React from 'react';\nimport Label from '@1ak31sha/ui/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n"},{"name":"ExampleRequired","description":"Required label","code":"import React from 'react';\nimport Label from '@1ak31sha/ui/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}\n"}]},{"name":"Menu","description":"","props":{"text":{"type":{"name":"string"},"required":false,"description":"the text to show on the button","defaultValue":{"value":"'Click me'","computed":false}},"theme":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{\n  button: {},\n}","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Menu.css'\n// import ReactLogo from  './action-popup-frame.svg'\nclass Button extends React.Component {\n  handleClick = reactSyntheticEvent => {\n    const { onClick } = this.props\n    if (onClick) {\n      onClick()\n    }\n  }\n\n  render() {\n    const lightTheme = {\n      button: {\n        // backgroundColor: 'white',\n        // color: 'palevioletred',\n      },\n    }\n    const createButtonStyleFromTheme = ({ button }) => ({\n      //  backgroundColor: button.backgroundColor || 'black',\n      //  borderColor: button.borderColor || 'palevioletred',\n      //  color: button.color || 'palevioletred',\n      backgroundColor: 'Transparent',\n      // background-repeat:no-repeat;\n      border: 'none',\n      // cursor:pointer,\n      // overflow: hidden,\n      outline: 'none',\n      //  fontSize: button.fontSize || '18pt',\n      //  fontFamily: button.fontFamily || 'verdana',\n\n      //  borderWidth: button.borderWidth || '2.1px',\n      //  borderStyle: button.borderStyle,\n      //  borderRadius: button.borderRadius || '1rem',\n\n      //  width: button.width,\n      //  padding: button.padding || '0.14em',\n      //  paddingLeft: '1em',\n      //  paddingRight: '1em',\n      //  margin: button.margin || '0.22em',\n    })\n    const { text, theme, light } = this.props // dark\n    console.log(createButtonStyleFromTheme(theme))\n    console.log(light)\n    // <img src={ReactLogo} alt=\"React Logo\" />\n    return (\n      <React.Fragment>\n\n      <button\n        style={\n          light\n            ? createButtonStyleFromTheme(lightTheme)\n            : createButtonStyleFromTheme(theme)\n        }\n        type=\"button\"\n        onClick={this.handleClick}\n        value={text}>\n        <div class=\"pill\">\n          <div class=\"kebab\">\n            <div class=\"dot\"></div>\n            <div class=\"dot\"></div>\n            <div class=\"dot\"></div>\n          </div>\n          <div class=\"labelContainer\">\n          <div class=\"label\">Actions</div></div>\n        </div>\n      </button>\n    </React.Fragment>\n    )\n  }\n}\n\nButton.propTypes = {\n  /** the text to show on the button */\n  text: PropTypes.string,\n\n  theme: PropTypes.object,\n}\n\nButton.defaultProps = {\n  text: 'Click me',\n\n  theme: {\n    button: {},\n  },\n}\n\nexport default Button\n","examples":[{"name":"Menu.examples","description":"","code":"import React, { useState } from 'react'\nimport Button from '@1ak31sha/ui/Menu'\nfunction ButtonContainer() {\n  const [theme, setTheme] = useState(false)\n\n  const toggleTheme = theme => {\n    setTheme(!theme)\n  }\n\n  return (\n    <div>\n      <Button\n        light={theme}\n        text=\"Toggle Default Themes\"\n        onClick={() => {\n          toggleTheme(theme)\n        }}\n      />\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <ButtonContainer />\n}\n"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from 'react';\nimport PasswordInput from '@1ak31sha/ui/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass¬†ProgressBar¬†extends¬†React.Component¬†{\n¬†¬†getColor¬†=¬†(percent)¬†=>¬†{\n¬†¬†¬†¬†if¬†(this.props.percent¬†===¬†100)¬†return¬†'green';\n¬†¬†¬†¬†return¬†this.props.percent¬†>¬†50¬†?¬†'lightgreen'¬†:¬†'red';\n¬†¬†}\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n¬†¬†render()¬†{\n¬†¬†¬†¬†const¬†{percent,¬†width,¬†height}¬†=¬†this.props;\n¬†¬†¬†¬†return¬†(\n¬†¬†¬†¬†¬†¬†<div¬†style={{border:¬†'solid¬†1px¬†lightgray',¬†width:¬†width}}>\n¬†¬†¬†¬†¬†¬†¬†¬†<div¬†style={{\n¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†width:¬†this.getWidthAsPercentOfTotalWidth(),\n¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†height,\n¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†backgroundColor:¬†this.getColor(percent)\n¬†¬†¬†¬†¬†¬†¬†¬†}}¬†/>\n¬†¬†¬†¬†¬†¬†</div>\n¬†¬†¬†¬†);\n¬†¬†}\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;","examples":[{"name":"Example100Percent","description":"100% progress and height 20px","code":"import React from 'react';\nimport ProgressBar from '@1ak31sha/ui/ProgressBar';\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />\n}\n"},{"name":"Example10Percent","description":"10% progress","code":"import React from 'react';\nimport ProgressBar from '@1ak31sha/ui/ProgressBar';\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />\n}\n"},{"name":"Example70Percent","description":"70% progress","code":"import React from 'react';\nimport ProgressBar from '@1ak31sha/ui/ProgressBar';\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />\n}\n"}]},{"name":"RegistrationForm","description":"Registration form with built-in validation.","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"Message displayed upon successful submission","defaultValue":{"value":"\"Thanks for registering!\"","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":"Called when form is submitted"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Minimum password length","defaultValue":{"value":"8","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8,\n};\n\nexport default RegistrationForm;\n","examples":[{"name":"ExampleRegistrationForm","description":"","code":"import React from 'react';\nimport RegistrationForm from '@1ak31sha/ui/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}\n"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with error","code":"import React from 'react';\nimport TextInput from '@1ak31sha/ui/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"},{"name":"ExampleOptional","description":"Optional TextBox","code":"import React from 'react';\nimport TextInput from '@1ak31sha/ui/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}\n"}]},{"name":"TextInputBEM","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && 'textinput__input--state-error'}\n        {...props}/>\n        {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with error","code":"import React from 'react';\nimport TextInputBEM from '@1ak31sha/ui/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"}]},{"name":"TextInputCSSModules","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}/>\n        {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with error","code":"import React from 'react';\nimport TextInputCSSModules from '@1ak31sha/ui/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"}]},{"name":"TextInputStyledComponents","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  const Error = styled.div`\n    color: red;\n  `\n\n  const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with error","code":"import React from 'react';\nimport TextInputStyledComponents from '@1ak31sha/ui/TextInputStyledComponents';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n"}]}]