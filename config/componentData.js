module.exports = [{"name":"ArrowBox","description":"","props":{"arrowSize":{"type":{"name":"number"},"required":false,"description":"the width of the arrow itself","defaultValue":{"value":"10","computed":false}},"position":{"type":{"name":"string"},"required":false,"description":"The position of the Box's Arrow","defaultValue":{"value":"\"BOTTOM\"","computed":false}},"backgroundColor":{"type":{"name":"string"},"required":false,"description":"The background color...","defaultValue":{"value":"\"#FFF\"","computed":false}},"borderWidth":{"type":{"name":"number"},"required":false,"description":"The border width","defaultValue":{"value":"1","computed":false}},"borderColor":{"type":{"name":"string"},"required":false,"description":"the border color","defaultValue":{"value":"\"palevioletred\"","computed":false}},"textColor":{"type":{"name":"string"},"required":false,"description":"the text color","defaultValue":{"value":"\"#000\"","computed":false}}},"code":"// http://www.cssarrowplease.com/\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { css, cx } from \"emotion\"\nimport \"./ArrowBox.css\"\nconst arrowSize = 10\nconst ArrowBox = ({\n  children,\n  position,\n  backgroundColor,\n  borderWidth,\n  borderColor,\n  textColor,\n  arrowSize\n}) => {\n  let left,\n    bottom,\n    topp,\n    right,\n    borderBottomBeforeColor,\n    borderBottomAfterColor,\n    borderTopBeforeColor,\n    borderTopAfterColor,\n    borderLeftBeforeColor,\n    borderLeftAfterColor,\n    borderRightBeforeColor,\n    borderRightAfterColor,\n    marginTop,\n    marginLeft = undefined\n\n  switch (position) {\n    case \"TOP\":\n      left = \"50%\"\n      bottom = \"100%\"\n      borderBottomBeforeColor = borderColor\n      borderBottomAfterColor = backgroundColor\n      marginLeft = arrowSize\n      break\n    case \"RIGHT\":\n      left = \"100%\"\n      topp = \"50%\"\n      borderLeftBeforeColor = borderColor\n      borderLeftAfterColor = backgroundColor\n      marginTop = arrowSize\n      break\n    case \"BOTTOM\":\n      topp = \"100%\"\n      left = \"50%\"\n      borderTopBeforeColor = borderColor\n      borderTopAfterColor = backgroundColor\n      marginLeft = arrowSize\n      break\n    case \"LEFT\":\n      right = \"100%\"\n      topp = \"50%\"\n      borderRightBeforeColor = borderColor\n      borderRightAfterColor = backgroundColor\n      marginTop = arrowSize\n      break\n    default:\n      break\n  }\n\n  return (\n    <div\n      className={css`\n        position: relative;\n        background: ${backgroundColor};\n        color: ${textColor};\n        border: ${borderWidth}px solid ${borderColor};\n        width: 200px;\n        padding: 0.6rem;\n        &:after,\n        &:before {\n          left: ${left};\n          bottom: ${bottom};\n          right: ${right};\n          top: ${topp};\n          border: solid transparent;\n          content: \" \";\n          height: 0;\n          width: 0;\n          position: absolute;\n          pointer-events: none;\n        }\n        &:before {\n          border-bottom-color: ${borderBottomBeforeColor};\n          border-left-color: ${borderLeftBeforeColor};\n          border-top-color: ${borderTopBeforeColor};\n          border-right-color: ${borderRightBeforeColor};\n          border-width: ${arrowSize + borderWidth}px;\n          margin-left: -${marginLeft + borderWidth}px;\n          margin-top: -${marginTop + borderWidth}px;\n        }\n        &:after {\n          border-bottom-color: ${borderBottomAfterColor};\n          border-left-color: ${borderLeftAfterColor};\n          border-top-color: ${borderTopAfterColor};\n          border-right-color: ${borderRightAfterColor};\n          border-width: ${arrowSize}px;\n          margin-left: -${marginLeft}px;\n          margin-top: -${marginTop}px;\n        }\n      `}\n    >\n      {children}\n    </div>\n  )\n}\n\nArrowBox.propTypes = {\n\n  /** the width of the arrow itself */\n  arrowSize: PropTypes.number,\n\n  /** The position of the Box's Arrow */\n  position: PropTypes.string,\n\n  /** The background color... */\n  backgroundColor: PropTypes.string,\n\n  /** The border width */\n  borderWidth: PropTypes.number,\n\n  /** the border color */\n  borderColor: PropTypes.string,\n\n  /** the text color */\n  textColor: PropTypes.string,\n}\n\n\nArrowBox.defaultProps = {\n  arrowSize: 10,\n  backgroundColor: \"#FFF\",\n  borderColor: \"palevioletred\",\n  borderWidth: 1,\n  position: \"BOTTOM\",\n  textColor: \"#000\",\n}\n\nexport default ArrowBox\n","examples":[{"name":"ArrowBox.examples","description":"","code":"import React from \"react\"\nimport ArrowBox from \"@1ak31sha/ui/ArrowBox\"\nfunction ArrowBoxContainer() {\n  const propsTest = {\n    position: \"TOP\",\n    size:2,\n    backgroundColor:\"white\",\n    borderWidth:1,\n    borderColor:\"palevioletred\",\n  }\n  return (\n    <div>\n      <ArrowBox\n        {...propsTest}\n      >\n      Brought to you by Lakeisha..........\n      Brought to you by Lakeisha..........\n      Brought to you by Lakeisha..........\n      </ArrowBox>\n      <br />\n      <ArrowBox\n        arrowSize={15}\n        position={\"RIGHT\"}\n        size={2}\n        backgroundColor={\"#232\"}\n        textColor={\"white\"}\n        borderWidth={4}\n        borderColor={\"palevioletred\"}\n      >\n      Brought to you by Lakeisha..........\n      </ArrowBox>\n      <br />\n      <ArrowBox\n      >\n        No Props baby :)\n      </ArrowBox>\n      <br />\n      <ArrowBox\n        position={\"LEFT\"}\n        size={2}\n        backgroundColor={\"white\"}\n        borderWidth={1}\n        borderColor={\"limegreen\"}\n      >\n      </ArrowBox>\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <ArrowBoxContainer />\n}\n"}]},{"name":"Button","description":"","props":{"text":{"type":{"name":"string"},"required":false,"description":"the text to show on the button","defaultValue":{"value":"'Click me'","computed":false}},"theme":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{\n  button: {},\n}","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Button extends React.Component {\n  handleClick = reactSyntheticEvent => {\n    const { onClick } = this.props\n    if (onClick) {\n      onClick()\n    }\n  }\n\n  render() {\n    const lightTheme = {\n      button: {\n        backgroundColor: 'white',\n        color: 'palevioletred',\n      },\n    }\n    const createButtonStyleFromTheme = ({ button }) => ({\n      backgroundColor: button.backgroundColor || 'black',\n      borderColor: button.borderColor || 'palevioletred',\n      color: button.color || 'palevioletred',\n\n      fontSize: button.fontSize || '18pt',\n      fontFamily: button.fontFamily || 'verdana',\n\n      borderWidth: button.borderWidth || '2.1px',\n      borderStyle: button.borderStyle,\n      borderRadius: button.borderRadius || '1rem',\n\n      width: button.width,\n      padding: button.padding || '0.14em',\n      paddingLeft: '1em',\n      paddingRight: '1em',\n      margin: button.margin || '0.22em',\n    })\n    const { text, theme, light } = this.props // dark\n    console.log(createButtonStyleFromTheme(theme))\n    console.log(light)\n    return (\n      <input\n        style={\n          light\n            ? createButtonStyleFromTheme(lightTheme)\n            : createButtonStyleFromTheme(theme)\n        }\n        type=\"button\"\n        onClick={this.handleClick}\n        value={text}></input>\n    )\n  }\n}\n\nButton.propTypes = {\n  /** the text to show on the button */\n  text: PropTypes.string,\n\n  theme: PropTypes.object,\n}\n\nButton.defaultProps = {\n  text: 'Click me',\n\n  theme: {\n    button: {},\n  },\n}\n\nexport default Button\n","examples":[{"name":"Button.examples","description":"","code":"import React, { useState } from 'react'\nimport Button from '@1ak31sha/ui/Button'\n\nfunction ButtonContainer() {\n  const [theme, setTheme] = useState(false)\n\n  const toggleTheme = theme => {\n    setTheme(!theme)\n  }\n\n  return (\n    <div>\n      <Button\n        light={theme}\n        text=\"Toggle Default Themes\"\n        onClick={() => {\n          toggleTheme(theme)\n        }}\n      />\n      <br />\n      <Button\n        text=\"Custom Theme\"\n        theme={{\n          button: {\n            backgroundColor: 'yellow',\n            borderColor: 'black',\n            color: 'blue',\n            borderRadius: '0.07em'\n          },\n        }}\n      />\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <ButtonContainer />\n}\n"}]},{"name":"Debug","description":"SVG Eye Icon","code":"import React from 'react'\n\n\nfunction Func() {\n  // const [index, setIndex] = useState(0)\n  console.log('function component')\n  // const [theme, setTheme] = useState()\n  //const themes = {\n  //  light: {\n  //    button: {\n  //      backgroundColor: '#121212',\n  //      borderColor: 'palevioletred',\n  //      color: 'palevioletred',\n  //      fontSize: '21pt',\n  //    },\n  //  },\n  //  dark: {\n  //    button: {\n  //      backgroundColor: '#202020',\n  //      borderColor: '#131313',\n  //      color: 'palevioletred',\n  //      fontSize: '16pt',\n  //      fontFamily: 'Avenir Next',\n  //      borderRadius: '3px',\n  //      width: '8em',\n  //      padding: '0.5rem 0',\n  //      margin: '0.5rem 1rem',\n  //      borderWidth: '0.051em',\n  //    },\n  //  },\n  //}\n\n  // const toggleTheme = () => {\n    // // // // // // // // console.log('new drip', index % 3)\n    // setIndex(index => index + 1)\n    // setTheme()\n  //}\n\n  return (\n    <div className=\"\">\n      <br />\n      <br />\n    </div>\n  )\n}\n\n\n/** SVG Eye Icon */\nclass EyeIcon2 extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { date: new Date() }\n    console.log('constructor, props', props, `testing`)\n  }\n  static getDerivedStateFromProps(props, state){\n    console.log('getderivedStateFromProps',props,state)\n  }\n    static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n  render() {\n    console.log('render')\n    return <h1>Hello,<Func/> </h1>\n  }\n}\n// Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n// Mounting\n// These methods are called in the following order when an instance of a component is being created and inserted into the DOM:\n\nexport default EyeIcon2\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\nimport Debug from '@1ak31sha/ui/Debug';\n\nexport default function EyeIconExample() {\n  return <Debug />;\n}\n"}]},{"name":"Dropdown","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\nimport Debug from '@1ak31sha/ui/Debug';\n\nexport default function EyeIconExample() {\n  return <Debug />;\n}\n"}]},{"name":"EyeIcon","description":"SVG Eye Icon","code":"import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\nimport EyeIcon from '@1ak31sha/ui/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n"}]},{"name":"Input","description":"","props":{"doesRender":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\n\nconst StyledInput = styled.input`\n  background-color: #464646;\n  color: #a6e22d;\n  border: 0;\n  height: 38px;\n  margin: 0.3em;\n  border-radius: 0.2em;\n`\nclass Input extends React.Component {\n  render() {\n    console.log('rendering')\n    const {\n      value,\n      doesRender,\n      placeholder,\n      onChange,\n      debug,\n    } = this.props\n    if (debug) {\n      console.log(onChange)\n    }\n    console.log(this.props)\n    return (\n      <React.Fragment>\n        {/*\n        <>asdf</>\n            */}\n      {doesRender && (\n          <StyledInput\n            value={value}\n            placeholder={placeholder}\n            type=\"text\"\n            onChange={this.typing}\n            size={16}\n          />\n        )}\n      </React.Fragment>\n    )\n  }\n  typing = evt => {\n    const { type, onChange, debug } = this.props\n    if (debug) {\n      console.log(evt.target.value)\n    }\n    return onChange(evt.target.value, type)\n  }\n}\n\n\nInput.propTypes = {\n  doesRender: PropTypes.bool\n}\n// Input.defaultProps = {\n  // doesRender: true,\n// \n// }\n Input.defaultProps = {\n doesRender: true,\n }\n\nexport default Input\n","examples":[{"name":"Input.example","description":"","code":"import React from 'react';\nimport Input from '@1ak31sha/ui/Input';\n\nexport default function InputExample() {\n  return <Input \n    placeholder='Enter Text'\n    doesRender={true}\n    />;\n}\n"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","examples":[{"name":"ExampleOptional","description":"Optional label","code":"import React from 'react';\nimport Label from '@1ak31sha/ui/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n"},{"name":"ExampleRequired","description":"Required label","code":"import React from 'react';\nimport Label from '@1ak31sha/ui/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}\n"}]},{"name":"Menu","description":"","props":{"text":{"type":{"name":"string"},"required":false,"description":"the text to show on the button","defaultValue":{"value":"'Click me'","computed":false}},"theme":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{\n  button: {},\n}","computed":false}}},"code":"import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Menu.css'\n// import ReactLogo from  './action-popup-frame.svg'\nclass Button extends React.Component {\n  handleClick = reactSyntheticEvent => {\n    const { onClick } = this.props\n    if (onClick) {\n      onClick()\n    }\n  }\n\n  render() {\n    const lightTheme = {\n      button: {\n        // backgroundColor: 'white',\n        // color: 'palevioletred',\n      },\n    }\n    const createButtonStyleFromTheme = ({ button }) => ({\n      //  backgroundColor: button.backgroundColor || 'black',\n      //  borderColor: button.borderColor || 'palevioletred',\n      //  color: button.color || 'palevioletred',\n      backgroundColor: 'Transparent',\n      // background-repeat:no-repeat;\n      border: 'none',\n      // cursor:pointer,\n      // overflow: hidden,\n      outline: 'none',\n      //  fontSize: button.fontSize || '18pt',\n      //  fontFamily: button.fontFamily || 'verdana',\n\n      //  borderWidth: button.borderWidth || '2.1px',\n      //  borderStyle: button.borderStyle,\n      //  borderRadius: button.borderRadius || '1rem',\n\n      //  width: button.width,\n      //  padding: button.padding || '0.14em',\n      //  paddingLeft: '1em',\n      //  paddingRight: '1em',\n      //  margin: button.margin || '0.22em',\n    })\n    const { text, theme, light } = this.props // dark\n    console.log(createButtonStyleFromTheme(theme))\n    console.log(light)\n    // <img src={ReactLogo} alt=\"React Logo\" />\n    return (\n      <React.Fragment>\n\n      <button\n        style={\n          light\n            ? createButtonStyleFromTheme(lightTheme)\n            : createButtonStyleFromTheme(theme)\n        }\n        type=\"button\"\n        onClick={this.handleClick}\n        value={text}>\n        <div class=\"pill\">\n          <div class=\"kebab\">\n            <div class=\"dot\"></div>\n            <div class=\"dot\"></div>\n            <div class=\"dot\"></div>\n          </div>\n          <div class=\"labelContainer\">\n          <div class=\"label\">Actions</div></div>\n        </div>\n      </button>\n    </React.Fragment>\n    )\n  }\n}\n\nButton.propTypes = {\n  /** the text to show on the button */\n  text: PropTypes.string,\n\n  theme: PropTypes.object,\n}\n\nButton.defaultProps = {\n  text: 'Click me',\n\n  theme: {\n    button: {},\n  },\n}\n\nexport default Button\n","examples":[{"name":"Menu.examples","description":"","code":"import React, { useState } from 'react'\nimport Button from '@1ak31sha/ui/Menu'\nfunction ButtonContainer() {\n  const [theme, setTheme] = useState(false)\n\n  const toggleTheme = theme => {\n    setTheme(!theme)\n  }\n\n  return (\n    <div>\n      <Button\n        light={theme}\n        text=\"Toggle Default Themes\"\n        onClick={() => {\n          toggleTheme(theme)\n        }}\n      />\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <ButtonContainer />\n}\n"}]},{"name":"ReactTable","description":"","code":"import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { css } from \"emotion\"\nimport \"./ReactTable.css\"\nimport {\n  useTable,\n  useGroupBy,\n  useFilters,\n  useSortBy,\n  useExpanded,\n} from \"react-table\"\n\nconst Table = ({ columns, data, rowClickCallback }) => {\n  //\n  //\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data }, useSortBy)\n  // } = useTable({ headers, data2 })\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr\n            {...headerGroup.getHeaderGroupProps()}\n            className={css`\n              background-image: linear-gradient(#969899, #ccc);\n              color: #000;\n              th {\n                &:first-child {\n                  border-top-left-radius: 52px;\n                  border-bottom-left-radius: 52px;\n                }\n                &:last-child {\n                  border-top-right-radius: 52px;\n                  border-bottom-right-radius: 52px;\n                }\n              }\n            `}\n          >\n            {headerGroup.headers.map(column => (\n              // Add the sorting props to control sorting. For this example\n              // we can add them into the header props\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                {column.render(\"Header\")}\n                {/* Add a sort direction indicator */}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? \" 🔽\" : \" 🔼\") : \"\"}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr\n              {...row.getRowProps()}\n              onClick={()=>rowClickCallback(row)}\n              className={css`\n                &:first-child {\n                  td {\n                    border-top: 0;\n                  }\n                }\n                color: palevioletred;\n                &:hover {\n                  color: black;\n                }\n              `}\n            >\n              {row.cells.map(cell => {\n                return <td \n                 className={css`\n                   text-align: center;\n                   `}  \n                {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nTable.propTypes = {}\n\nTable.defaultProps = {}\n\nexport default Table\n\n// psuedo code\n/*\n\n\n\n\nfor each item, render row\nloop through each row, then check the particular colum, get longest string and adjust size\n\nmaintain \"view\" and database, handle sorting in database, then send the data into the table\n\"pre-processor?\" go through values, figure out biggest value and adjust column size\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n","examples":[{"name":"ReactTable.examples","description":"","code":"import React from \"react\"\nimport Table from \"@1ak31sha/ui/ReactTable\"\nfunction TableExample() {\n  const columns = React.useMemo(\n    () => [\n      { Header: \"#\", accessor: \"quantity\" },\n      { Header: \"Name\", accessor: \"name\" },\n      { Header: \"Type\", accessor: \"type\" },\n    ],\n    [],\n  )\n  const data = React.useMemo(() => [\n    { quantity: 4, name: \"Gengar\", type: \"psychic\" },\n    { quantity: 4, name: \"Vileplume\", type: \"grass\" },\n    { quantity: 4, name: \"Proffessor Oak\", type: \"trainer\" },\n  ])\n\n  const rowClick = (row) => {\n    console.log(row)\n  }\n\n  return (\n    <div>\n      <Table columns={columns} data={data} rowClickCallback={rowClick} />\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <TableExample />\n}\n"}]},{"name":"Table","description":"","code":"import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { css } from \"emotion\"\nimport \"./Table.css\"\n\nconst Table = ({ headers, data }) => {\n  //\n  //\n  const col_widths = [];\n  const getColumn = (data, key) => {\n    let arr = []\n    data.map((row, i) => {\n      arr.push(row[0])\n    })\n    console.log(arr)\n    return arr\n  }\n  const calcWidths = data => {\n    // const first = getColumn(data, \"quantity\")\n    // var fontSize = 12\n    // var test = document.getElementById(\"Test\")\n    // test.style.fontSize = fontSize\n    // var height = test.clientHeight + 1 + \"px\"\n    // var width = test.clientWidth + 1 + \"px\"\n\n    // console.log(height, width)\n  }\n  const renderItem = item => {\n    const col_widths = [3, 4, 5]\n    return Object.entries(item).map(entry => {\n      console.log(entry[0], entry[1])\n      let width = 0\n      switch (entry[0]) {\n        case \"name\":\n          width = 50\n          break\n        case \"quantity\":\n          width = 20\n        default:\n          break\n      }\n      return (\n        <div\n          className={css`\n            width: ${width}px;\n          `}\n        >\n          {entry[1]}\n        </div>\n      )\n    })\n  }\n\n  const renderRows = data => {\n\n    if (data.length > 0) {\n      calcWidths(data)\n      return data.map((item, i) => {\n        return (\n          <React.Fragment key={i}>\n            <div\n              className={css`\n                display: flex;\n                flex-direction: row;\n              `}\n              onClick={() => {}}\n            >\n              {renderItem(item)}\n            </div>\n          </React.Fragment>\n        )\n      })\n    } else {\n      return <div key={0}>no data!</div>\n    }\n  }\n\n  return (\n    <div>\n      <div\n        className={css`\n          display: flex;\n          flex-direction: row;\n        `}\n      >\n        <div className=\"quantity\">#</div>\n        <div className=\"name\">Name</div>\n        <div className=\"category\">Category</div>\n        <div className=\"type\">Type</div>\n        <div className=\"hp\">HP</div>\n        <div className=\"retreatCost\">Retreat Cost</div>\n      </div>\n\n      {renderRows(data)}\n    </div>\n  )\n}\n\nTable.propTypes = {\n}\n\nTable.defaultProps = {\n}\n\nexport default Table\n\n// psuedo code\n/*\n\n\n\n\nfor each item, render row\nloop through each row, then check the particular colum, get longest string and adjust size\n\nmaintain \"view\" and database, handle sorting in database, then send the data into the table\n\"pre-processor?\" go through values, figure out biggest value and adjust column size\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n","examples":[{"name":"Table.examples","description":"","code":"import React from \"react\"\nimport Table from \"@1ak31sha/ui/Table\"\nfunction TableExample() {\n  const headers = [\n    { id: \"quantity\", title: \"Quantity\" },\n    { id: \"name\", title: \"Name\" },\n    { id: \"type\", title: \"Type\" },\n  ]\n  const data = [\n    { quantity: 4, name: \"Gengar\", type: \"psycich\" },\n    { quantity: 4, name: \"Vileplume\", type: \"grass\" },\n    { quantity: 4, name: \"Proffessor Oak\", type: \"trainer\" },\n  ]\n\n  return (\n    <div>\n      <Table headers={headers} data={data} />\n    </div>\n  )\n}\nexport default function ButtonExample() {\n  return <TableExample />\n}\n"}]}]